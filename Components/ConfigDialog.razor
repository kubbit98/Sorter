@using Sorter.Data;
@using Microsoft.Extensions.Options;
@inject IJSRuntime JS
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment hostingEnv
@inject ConfigOptionsService ConfigOptionsService
@inject FileService FileService
@inject IConfiguration configuration
@inject IOptionsMonitor<ConfigOptions> configOptions
@inject ILogger<ConfigDialog> logger
@inject IToastService toastService

<div class="modal fade" id="configModal" tabindex="-1" aria-labelledby="configModalLabel" aria-hidden="true" data-prevent-keydown>
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Configuration</h4>
                <button type="button" class="close" data-bs-dismiss="modal" data-prevent-keydown>&times;</button>
            </div>
            <div class="modal-body">
                @*password*@
                @if (!_truePassword.Equals(string.Empty))
                {
                    <form class="form">
                        <div class="form-group row">
                            <label for="password" class="col-sm-2 col-form-label">Password</label>
                            <div class="col-sm-10">
                                <input class="form-control" type="password" id="passwordToUnlock" name="passwordToUnlock" @bind="_unlockBoxPassword" @bind:event="oninput" placeholder="Type password here" data-prevent-keydown>
                            </div>
                        </div>
                    </form>
                    <br />
                }
                @if (_truePassword.Equals(string.Empty) || _truePassword.Equals(_unlockBoxPassword))
                {
                    //source
                    <div class="row mb-3">
                        <label for="source" class="col-sm-2 col-form-label">Source:</label>
                        <div class="col-sm-6">
                            <input class="form-control" type="text" id="source" name="source" @bind="_source" @bind:event="oninput" placeholder="Source directory path" data-prevent-keydown />
                        </div>
                        <div class="col-sm-4">
                            @if (!String.IsNullOrWhiteSpace(_source) && Directory.Exists(Path.GetFullPath(_source)))
                            {
                                <p>Path is valid</p>
                            }
                            else
                            {
                                <p>Path is invalid</p>
                            }
                        </div>
                    </div>
                    //exclude dirs source
                    <div class="row mb-3">
                        <label for="exclude-dirs-sour" class="col-sm-2 col-form-label">Directories in source to exclude:</label>
                        <div class="col-sm-10">
                            <div class="row row-cols-auto">
                                @foreach (var item in _excludeSourceList)
                                {
                                    <div class="col">
                                        @item
                                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => RemoveExcludeSource(item)" data-prevent-keydown>X</button>
                                    </div>
                                }
                                <div class="col">
                                    <input class="form-control" placeholder="Folder to exclude" @bind="_newExcludeSource" data-prevent-keydown />
                                </div>
                                <div class="col">
                                    <button class="btn btn-dark btn-sm" @onclick="AddExcludeSource" data-prevent-keydown>Add</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    //destination
                    <div class="row mb-3">
                        <label for="destination" class="col-sm-2 col-form-label">Destination:</label>
                        <div class="col-sm-6">
                            <input class="form-control" type="text" id="destination" name="destination" @bind="_destination" @bind:event="oninput" placeholder="Destination directory path" data-prevent-keydown>
                        </div>
                        <div class="col-sm-4">
                            @if (!String.IsNullOrWhiteSpace(_destination) && Directory.Exists(Path.GetFullPath(_destination)))
                            {
                                <p>Path is valid</p>
                            }
                            else
                            {
                                <p>Path is invalid</p>
                            }
                        </div>
                    </div>
                    //exclude dirs destination
                    <div class="row mb-3">
                        <label for="exclude-dirs-dest" class="col-sm-2 col-form-label">Directories in destination to exclude:</label>
                        <div class="col-sm-10">
                            <div class="row row-cols-auto">
                                @foreach (var item in _excludeDestinationList)
                                {
                                    <div class="col">
                                        @item
                                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => RemoveExcludeDestination(item)" data-prevent-keydown>X</button>
                                    </div>
                                }
                                <div class="col">
                                    <input class="form-control" placeholder="Folder to exclude" @bind="_newExcludeDestination" data-prevent-keydown />
                                </div>
                                <div class="col">
                                    <button class="btn btn-dark btn-sm" @onclick="AddExcludeDestination" data-prevent-keydown>Add</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    //renaming
                    @if (!_truePassword.Equals(string.Empty))
                    {
                        <div class="row mb-3">
                            <div class="col-sm-10 offset-sm-2">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="allowRename" name="allowRename" @bind="_allowRename" data-prevent-keydown>
                                    <label class="form-check-label" for="allowRename">
                                        Allow all users to rename the files
                                    </label>
                                </div>
                            </div>
                        </div>
                    }
                    //white or black
                    <div class="row mb-3">
                        <div class="col-sm-10 offset-sm-2">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="use_white" name="use_white" @bind="_useWhite" data-prevent-keydown>
                                <label class="form-check-label" for="use_white">
                                    Use white list of extensions instead of black list
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        @if (_useWhite)
                        {
                            <label for="white-list" class="col-sm-2 col-form-label">White list:</label>
                            <div class="col-sm-10">
                                <div class="container">
                                    <div class="row row-cols-auto">
                                        @foreach (var item in _whiteList)
                                        {
                                            <div class="col">
                                                @(item.Equals("") ? "No extension" : item)
                                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => RemoveWhite(item)" data-prevent-keydown>X</button>
                                            </div>
                                        }
                                        <div class="col">
                                            <input class="form-control" placeholder="New extension" @bind="_newWhite" data-prevent-keydown />
                                        </div>
                                        <div class="col">
                                            <button class="btn btn-dark btn-sm" @onclick="AddWhite" data-prevent-keydown>Add</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <label for="black-list" class="col-sm-2 col-form-label">Black list:</label>
                            <div class="col-sm-10">
                                <div class="container">
                                    <div class="row row-cols-auto">
                                        @foreach (var item in _blackList)
                                        {
                                            <div class="col">
                                                @(item.Equals("") ? "No extension" : item)
                                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => RemoveBlack(item)" data-prevent-keydown>X</button>
                                            </div>
                                        }
                                        <div class="col">
                                            <input class="form-control" placeholder="New extension" @bind="_newBlack" data-prevent-keydown />
                                        </div>
                                        <div class="col">
                                            <button class="btn btn-dark btn-sm" @onclick="AddBlack" data-prevent-keydown>Add</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p>You need to provide password, to change the app settings. Password can be find in appsettings.json file</p>
                }
            </div>
            <div class="modal-footer">
                @if (_truePassword.Equals(string.Empty) || _truePassword.Equals(_unlockBoxPassword))
                {
                    <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-primary" ButtonName="Save new configuration" ButtonOnClickAction="Save" CustomButtonParameter=_dictPreventKeydown />
                    @if (!@hostingEnv.IsProduction())
                    {
                        <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-info" ButtonName="Load default config for testing" ButtonOnClickAction="LoadDefaultTestConfig" CustomButtonParameter=_dictPreventKeydown />
                        <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-info" ButtonName="Rearrange test files to their original state" ButtonOnClickAction="RearrangeTestFiles" CustomButtonParameter=_dictPreventKeydown />
                    }
                }
                <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-warning" ButtonName="Return" ButtonOnClickAction="Close" CustomButtonParameter=_dictPreventKeydown />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<bool> OnChange { get; set; }
    private Dictionary<string, object> _dictPreventKeydown = new Dictionary<string, object> { { "data-prevent-keydown", "" } };

    private string _source = String.Empty;
    private List<string> _excludeSourceList = new List<string>();
    private string _newExcludeSource = String.Empty;
    private string _destination = String.Empty;
    private List<string> _excludeDestinationList = new List<string>();
    private string _newExcludeDestination = String.Empty;
    private bool _useWhite = true;
    private List<string> _whiteList = new List<string>();
    private string _newWhite = String.Empty;
    private List<string> _blackList = new List<string>();
    private string _newBlack = String.Empty;
    private string _unlockBoxPassword = String.Empty;
    private string _truePassword = String.Empty;
    private bool _allowRename = true;

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }
    public async Task Init()
    {
        await Task.Run(() =>
        {
            _source = ConfigOptionsService.GetPathIfValid(configOptions.CurrentValue.Source);
            _excludeSourceList = Array.ConvertAll(configOptions.CurrentValue.ExcludeDirsSource, dir => dir = Path.GetFullPath(dir)).ToList();
            _destination = ConfigOptionsService.GetPathIfValid(configOptions.CurrentValue.Destination);
            _excludeDestinationList = Array.ConvertAll(configOptions.CurrentValue.ExcludeDirsDestination, dir => dir = Path.GetFullPath(dir)).ToList();
            _useWhite = configOptions.CurrentValue.UseWhiteListInsteadOfBlackList;
            _whiteList = configOptions.CurrentValue.WhiteList.ToList();
            _blackList = configOptions.CurrentValue.BlackList.ToList();
            _truePassword = configuration.GetValue<string>("Password");
            _allowRename = configOptions.CurrentValue.AllowRename;
            if (string.IsNullOrEmpty(_source)) _source = Path.GetFullPath(".");
            if (string.IsNullOrEmpty(_destination)) _destination = Path.GetFullPath(".");
        });
    }
    private async void Close()
    {
        await InvokeAsync(() => OnChange.InvokeAsync(false));
    }
    private async void Save()
    {
        var config = configOptions.CurrentValue;
        if (!ConfigOptionsService.CheckPath(_source))
        {
            toastService.ShowError("Source path is invalid");
            return;
        }
        if (!ConfigOptionsService.CheckPath(_destination))
        {
            toastService.ShowError("Destination path is invalid");
            return;
        }
        config.Source = _source;
        config.ExcludeDirsSource = _excludeSourceList.ToArray();
        config.Destination = _destination;
        config.ExcludeDirsDestination = _excludeDestinationList.ToArray();
        config.UseWhiteListInsteadOfBlackList = _useWhite;
        config.WhiteList = _whiteList.ToArray();
        config.BlackList = _blackList.ToArray();
        config.AllowRename = _allowRename;
        try
        {
            ConfigOptionsService.SaveOptions(config);
            toastService.ShowSuccess("Settings are saved");
            while (!ConfigOptionsService.CheckMonitor(config)) Thread.Sleep(100);
            if (!await FileService.InitializeFiles(true))
            {
                toastService.ShowError("Cannot initialize service. The destination or/and source path is invalid. Visit the configuration page");
                return;
            }
            await InvokeAsync(() => OnChange.InvokeAsync(true));
        }
        catch (Exception e)
        {
            toastService.ShowError(e.Message);
        }
    }
    private void RemoveExcludeSource(string exclude)
    {
        _excludeSourceList.Remove(exclude);
    }
    private void AddExcludeSource()
    {
        if (!string.IsNullOrWhiteSpace(_newExcludeSource))
        {
            try
            {
                var path = Path.GetFullPath(_newExcludeSource.Replace("\"", ""));
                if (Directory.Exists(path) && !_excludeSourceList.Contains(path))
                {
                    _excludeSourceList.Add(path);
                    _newExcludeSource = string.Empty;
                }
                else
                {
                    toastService.ShowWarning("Invalid path");
                }
            }
            catch (Exception e)
            {
                logger.LogError(e.Message);
            }
        }
    }
    private void RemoveExcludeDestination(string exclude)
    {
        _excludeDestinationList.Remove(exclude);
    }
    private void AddExcludeDestination()
    {
        if (!string.IsNullOrWhiteSpace(_newExcludeDestination))
        {
            try
            {
                var path = Path.GetFullPath(_newExcludeDestination.Replace("\"", ""));
                if (Directory.Exists(path) && !_excludeDestinationList.Contains(path))
                {
                    _excludeDestinationList.Add(path);
                    _newExcludeDestination = string.Empty;
                }
                else
                {
                    toastService.ShowWarning("Invalid path");
                }
            }
            catch (Exception e)
            {
                logger.LogError(e.Message);
            }
        }
    }
    private void RemoveWhite(string white)
    {
        _whiteList.Remove(white);
    }
    private void AddWhite()
    {
        _newWhite = _newWhite.Trim();
        if (!_whiteList.Contains(_newWhite))
        {
            _whiteList.Add(_newWhite);
            _newWhite = string.Empty;
        }
    }
    private void RemoveBlack(string black)
    {
        _blackList.Remove(black);
    }
    private void AddBlack()
    {
        _newBlack = _newBlack.Trim();
        if (!_blackList.Contains(_newBlack))
        {
            _blackList.Add(_newBlack);
            _newBlack = string.Empty;
        }
    }
    private async void LoadDefaultTestConfig()
    {
        ConfigOptionsService.LoadDefaultTestConfig();
        toastService.ShowInfo("Default configuration loaded");
        Thread.Sleep(1000);
        if (!await FileService.InitializeFiles(true))
        {
            toastService.ShowError("Something wrong with configuration.");
            return;
        }
        await InvokeAsync(() => OnChange.InvokeAsync(true));
    }
    private async void RearrangeTestFiles()
    {
        ConfigOptionsService.RearrangeTestFiles();
        toastService.ShowInfo("Test files rearranged");
        Thread.Sleep(1000);
        if (!await FileService.InitializeFiles(true))
        {
            toastService.ShowError("Something wrong with configuration.");
            return;
        }
        await InvokeAsync(() => OnChange.InvokeAsync(true));
    }
}
