@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Sorter.Data;
@using Blazored.Toast.Configuration;
@using System.Text.RegularExpressions;
@inject FileService FileService
@inject IJSRuntime JS
@inject IHostApplicationLifetime AppLifetime
@inject IToastService toastService
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>sorter app</PageTitle>

@switch (_status)
{
    case Status.BeforeInit:
        <div class="vh-100 py-3">
            <h1 id="h1">sorter app</h1>
            <div class="row mb-3">
                <div class="col">
                    <p>Initiate a session to get started. If you are launching the application for the first time, you will need to further configure the application.</p>
                </div>
            </div>
            <div class="row mb-3">
                <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-primary" ButtonName="Init session" ButtonOnClickAction="InitSession" />
                <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-outline-secondary" ButtonName="Configuration" ButtonOnClickTask="ConfigModalOnOpen" CustomButtonParameter="_dictConfigDialog" />
            </div>
        </div>
        break;
    case Status.Empty:
        <div class="vh-100 py-3">
            <div class="row mb-3">
                <div class="col">
                    <p>No more files to sort! You can shutdown app, back to previous file, reset server or reconfigure app.</p>
                </div>
            </div>
            <div class="row mb-3">
                <ButtonInDiv DivCssClass="col-6 d-grid" ButtonCssClass="btn btn-secondary" ButtonName="Back" ButtonOnClickTask="Back" />
                <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-outline-secondary" ButtonName="Reset server" ButtonOnClickAction="Reset" />
                <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-outline-secondary" ButtonName="Shut down" ButtonOnClickAction="ShutdownApp" />
                <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-outline-secondary" ButtonName="Configuration" ButtonOnClickTask="ConfigModalOnOpen" CustomButtonParameter="_dictConfigDialog" />
            </div>
        </div>
        break;
    case Status.Initialized:
        <div class="row vh-100 py-3">
            @* Column with all buttons *@
            <div class="@(_showSideFiles ? "col-sm-2" : "col-sm-3") overflow-auto text-break max-vh-97" id="controlColumn">
                @*name*@
                <div class="row mb-3" style="min-height: 100px;">
                    <p>
                        @if (null != _currentFile)
                        {
                            @switch (_fileNameInputStatus)
                            {
                                case FileNameInputStatus.Closed:
                                    @_currentFile.OnlyPath
                                    <strong>@_currentFile.Name.@_currentFile.Extension</strong>
                                    @if (_password!.Equals(string.Empty) || _password.Equals(_unlockBoxPassword) || _allowRename)
                                    {
                                        <button class="btn btn-info btn-circle btn-circle-xs ms-1" @onclick=@FileNameInputOpen><i class="bi bi-pencil"></i></button>
                                    }
                                    break;
                                case FileNameInputStatus.Opened:
                                    <div class="row">
                                        <div class="col-auto">
                                            @_currentFile.OnlyPath
                                        </div>
                                        @if (_password!.Equals(string.Empty) || _password.Equals(_unlockBoxPassword) || _allowRename)
                                        {
                                            <div class="col-6">
                                                <input @ref="_fileNameInput" data-prevent-keydown class="form-control @(_isNewFileNameCorrect ? "" : "is-invalid")" type="text" id="fileName" name="fileName" @bind="_newFileName" @bind:event="oninput" @onkeyup="StateHasChanged" @onkeydown="SaveFileNameKeyDown">
                                                <div class="invalid-feedback">Illegal name of file.</div>
                                            </div>
                                            <div class="col-6 d-flex align-items-center">
                                                <button class="btn btn-success btn-circle btn-circle-xs m-1" @onclick=@SaveFileName @attributes=@_dictNewFileName><i class="bi bi-check"></i></button>
                                                <button class="btn btn-danger btn-circle btn-circle-xs m-1" @onclick=@FileNameInputClose><i class="bi bi-ban"></i></button>
                                            </div>
                                        }
                                        else
                                        {
                                            <button class="btn btn-danger btn-circle btn-circle-xs m-1" @onclick=@FileNameInputClose><i class="bi bi-ban"></i></button>
                                        }
                                    </div>

                                    @* @if (_password.Equals(string.Empty) || _password.Equals(_unlockBoxPassword) || _allowRename) {  } *@
                                    @if (null != _currentFile && (string.IsNullOrWhiteSpace(_newFileName) || _currentFile.Name.Equals(_newFileName)))
                                    {
                                        _dictNewFileName = new Dictionary<string, object> { { "disabled", "" } };
                                        _isNewFileNameCorrect = true;
                                    }
                                    else if (_newFileName.IndexOfAny(Path.GetInvalidFileNameChars().ToArray()) != -1)
                                    {
                                        _dictNewFileName = new Dictionary<string, object> { { "disabled", "" } };
                                        _isNewFileNameCorrect = false;
                                    }
                                    else
                                    {
                                        _dictNewFileName = null!;
                                        _isNewFileNameCorrect = true;
                                    }
                                    break;
                            }
                        }
                    </p>
                </div>
                @*password*@
                @if (!_password!.Equals(string.Empty))
                {
                    <div class="row mb-3">
                        <label class="col-sm-6" for="password">Password to unlock more function:</label>
                        <div class="col-sm-6">
                            <input class="form-control" type="password" id="passwordToUnlock" name="passwordToUnlock" @bind="_unlockBoxPassword" @bind:event="oninput" data-prevent-keydown>
                        </div>
                    </div>
                }
                @*main buttons*@
                <div class="row mb-3">
                    <ButtonInDiv DivCssClass="col d-grid mb-1" ButtonCssClass="btn btn-secondary" ButtonName="Back" ButtonOnClickTask="Back" />
                    <ButtonInDiv DivCssClass="col d-grid mb-1" ButtonCssClass="btn btn-secondary" ButtonName="Next" ButtonOnClickTask="Next" />
                    <div class="col d-grid mb-1 dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                            More
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                            <li><ButtonInDiv ButtonCssClass="dropdown-item" ButtonName="Add new folder" ButtonOnClickTask="FolderModalOpen" CustomButtonParameter="_dictFolderDialog" /></li>
                            <li><ButtonInDiv ButtonCssClass="dropdown-item" ButtonName="Keybinding configuration" ButtonOnClickTask="KeyBindsModalOnOpen" CustomButtonParameter="_dictKeyBindsDialog" /></li>
                            <li><ButtonInDiv ButtonCssClass="dropdown-item" ButtonName="Configuration" ButtonOnClickTask="ConfigModalOnOpen" CustomButtonParameter="_dictConfigDialog" /></li>
                            @if (_password.Equals(_unlockBoxPassword) || _password.Equals(string.Empty))
                            {
                                <ButtonInDiv ButtonCssClass="dropdown-item" ButtonName="Reset server" ButtonOnClickAction="Reset" />
                                <ButtonInDiv ButtonCssClass="dropdown-item" ButtonName="Shut down" ButtonOnClickAction="ShutdownApp" />
                            }
                        </ul>
                    </div>
                </div>

                @*folders*@
                <div class="row mb-3">
                    @for (int i = 0; i < _folders!.Length; i++)
                    {
                        var k = i;
                        <ButtonInDiv DivCssClass="col d-grid my-1 px-1" ButtonCssClass="btn btn-primary overflow-hidden" ButtonName="@_folders[k].DisplayName" ButtonOnClickAction="async () => await MoveFile(_folders[k].Path)" Title="@_folders[k].Path" />
                    }
                </div>
            </div>
            @* Column with media*@
            <div class="@(_showSideFiles ? "col-sm-8" : "col-sm-9") max-vh-97" style="align-items: center; display: flex;" tabindex="-1" id="mediaDiv">
                @switch (_currentFile?.FileType)
                {
                    case File.FileTypeEnum.Video:
                        <video class="img-fluid mx-auto d-block" style="max-height: 95vh;" controls autoplay id="videoTagId">
                            <source src="@_currentFile?.Path">
                            Your browser does not support the video tag.
                        </video>
                        break;
                    case File.FileTypeEnum.Photo:
                        <img data-bs-toggle="modal" data-bs-target="#photoModal" @onclick="@PhotoModalOpen"
                             src="@(_currentFile!.DisplayPath)"
                             class="img-fluid mx-auto d-block"
                             style="max-height: 97vh;" />
                        <PhotoDialog Photo="@_currentFile" OnNext="@Next" OnBack="@Back" @ref="_photoDialog"
                                     IsPrevPhoto="@(_previousFile?.FileType==File.FileTypeEnum.Photo)"
                                     IsNextPhoto="@(_nextFile?.FileType==File.FileTypeEnum.Photo)" />
                        break;
                    case File.FileTypeEnum.PDF:
                        <embed src="@_currentFile?.Path" style="width:100%;height:95vh;" />
                        break;
                    case File.FileTypeEnum.Text:
                        <p id="txtcontent">@GetTextFileContent().Result</p>
                        break;
                    default:
                        <p>Filetype "@_currentFile?.Extension" is not supported</p>
                        break;
                }
            </div>
            @* Column with preview files*@
            @if (_showSideFiles)
            {
                <div class="col-sm-2 overflow-auto d-flex flex-column max-vh-97 text-break" id="previewColumn">
                    <div class="row mb-auto justify-content-end">
                        @if (null != _previousFile)
                        {
                            @if (_previousFile?.FileType == File.FileTypeEnum.Photo)
                            {
                                <img src="@_previousFile.DisplayPath" class="img-fluid" style="cursor: pointer;" @onclick="@Back" />
                            }
                            else
                            {
                                <p class="my-0 py-0 text-end">Previous file is not a photo</p>
                            }
                            <p class="my-0 py-0 text-end">Previous file: @_previousFile.NameWithExtension<br />(in @_previousFile.Path)</p>
                        }
                    </div>
                    @if (null != _nextFile)
                    {
                        <div class="row justify-content-end">
                            <p class="my-0 py-0 text-end">Next file: @_nextFile.NameWithExtension<br />(in @_nextFile.Path)</p>
                            @if (_nextFile?.FileType == File.FileTypeEnum.Photo)
                            {
                                <img src="@_nextFile.DisplayPath" class="img-fluid" style="cursor: pointer;" @onclick="@Next" />
                            }
                            else
                            {
                                <p class="my-0 py-0 text-end">Next file is not a photo</p>
                            }
                        </div>
                    }
                </div>
            }
        </div>
        break;
}

@if (_status == Status.Initialized)
{
    <FolderDialog ExistingFolders="@_folders?.Select(f => f.Name).ToArray()" OnSaveTask="@FolderModalClose" @ref=_folderDialog />
    <KeyBindsDialog OnChange="@KeyBindsModalClose" ExistingFolders="_folders" @ref=_keyBindsDialog />
#pragma warning disable CS0162
    if (SHOW_DEBUG_INFO)
    {
        <div class="row mb-3">
            <p>
                INDEX @_myMediaCurrentIndex
            </p>
            @if (null != _myMediaIndexes)
            {
                foreach (var tuple in _myMediaIndexes)
                {
                    <p>tupla: @tuple.Item1 | @tuple.Item2</p>
                }
            }
            <p>
                status: @_status
            </p>
        </div>
    }
#pragma warning restore CS0162
}
<ConfigDialog OnChange="@ConfigModalClose" @ref=_configDialog />
<BlazoredToasts Position="ToastPosition.BottomRight" IconType="IconType.Material" ShowProgressBar="true"
                RemoveToastsOnNavigation="true" PauseProgressOnHover="true" MaxToastCount="3" Timeout="10" />

@code {
    private const string s_storageMyMediaList = "_MyMediaIndexes";
    private const string s_storageMyMediaCurrentIndex = "_MyMediaCurrentIndex";
    private const string s_storageStatus = "_Status";
    private string _storagePrefix = string.Empty;

    private const bool SHOW_DEBUG_INFO = false;
    private const int LOAD_VIDEO_TIME_DELAY = 100;
    private const int MOVE_FILE_TIME_DELAY = 500;

    private static Regex s_alfanumeralRegex = new Regex(@"^[a-zA-Z0-9]$");

    private List<Tuple<int, string>>? _myMediaIndexes;
    private int _myMediaCurrentIndex;
    private File? _currentFile;
    private File? _previousFile;
    private File? _nextFile;
    private Folder[]? _folders;
    private string _unlockBoxPassword = string.Empty;
    private string? _password;
    private bool _isNewFileNameCorrect = true;
    private string _newFileName = string.Empty;
    private bool _allowRename;
    private bool _showSideFiles;
    private Status _status = Status.OnConstructor;
    private FileNameInputStatus _fileNameInputStatus = FileNameInputStatus.Closed;
    private FolderDialog _folderDialog = new FolderDialog();
    private ConfigDialog _configDialog = new ConfigDialog();
    private KeyBindsDialog _keyBindsDialog = new KeyBindsDialog();
    private PhotoDialog _photoDialog = new PhotoDialog();
    private ElementReference _fileNameInput;

    private Dictionary<string, object> _dictFolderDialog = new Dictionary<string, object> { { "data-bs-toggle", "modal" }, { "data-bs-target", "#folderModal" } };
    private Dictionary<string, object> _dictConfigDialog = new Dictionary<string, object> { { "data-bs-toggle", "modal" }, { "data-bs-target", "#configModal" } };
    private Dictionary<string, object> _dictKeyBindsDialog = new Dictionary<string, object> { { "data-bs-toggle", "modal" }, { "data-bs-target", "#keyBindsModal" } };
    private Dictionary<string, object> _dictNewFileName = new Dictionary<string, object> { { "disabled", "" } };
    //private Dictionary<string, object> _dictPreventKeydown = new Dictionary<string, object> { { "data-prevent-keydown", "" } }; //add CustomButtonParameter=_dictPreventKeydown to buttonindiv to prevent key down event, not sure if useful so commented out

    public enum Status
    {
        OnConstructor, BeforeInit, Initialized, Empty,
    }
    public enum FileNameInputStatus
    {
        Opened, Closed,
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _storagePrefix = await FileService.GetStoragePrefix();
            await _PSSReadStatus();
            switch (_status)
            {
                case Status.OnConstructor:
                    _status = Status.BeforeInit;
                    break;
                case Status.BeforeInit:
                    break;
                case Status.Initialized:
                    await _PSSReadMyMediaIndexes();
                    await _PSSReadMyMediaCurrentIndex();
                    LoadSession();
                    _currentFile = await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex].Item1, _myMediaIndexes![_myMediaCurrentIndex].Item2);
                    if (_currentFile == null) break;
                    _newFileName = _currentFile.Name;
                    if (_myMediaCurrentIndex > 0)
                        _previousFile = await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex - 1].Item1, _myMediaIndexes![_myMediaCurrentIndex - 1].Item2);
                    if (_myMediaCurrentIndex + 1 < _myMediaIndexes!.Count)
                        _nextFile = await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex + 1].Item1, _myMediaIndexes![_myMediaCurrentIndex + 1].Item2);
                    break;
                case Status.Empty:
                    await _PSSReadMyMediaIndexes();
                    await _PSSReadMyMediaCurrentIndex();
                    break;
            }
            var dotNetReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerDNF", dotNetReference);
        }
        if (firstRender) StateHasChanged();
    }
    private async void LoadSession()
    {
        _folders = await FileService.GetFoldersAsync();
        _password = await FileService.GetPassword();
        _allowRename = await FileService.GetAllowRename();
        _showSideFiles = await FileService.GetShowSidePanel();
    }
    private async void InitSession()
    {
        if (!await FileService.InitializeFiles(false))
        {
            toastService.ShowError("Cannot initialize service. The destination or/and source path is invalid. Visit the configuration page");
            return;
        }
        int? index = FileService.GetNextIndex();
        if (index.HasValue)
        {
            _myMediaIndexes = new List<Tuple<int, string>>();
            LoadSession();
            _currentFile = await GetFileFromFileService(index.Value);
            _newFileName = _currentFile.Name;
            _myMediaIndexes.Add(new Tuple<int, string>(_currentFile.FIndex!.Value, _currentFile.Name));
            int? nextIndex = FileService.GetNextIndex();
            if (nextIndex.HasValue) _nextFile = await GetFileFromFileService(nextIndex.Value);
            if (null != _nextFile) _myMediaIndexes.Add(new Tuple<int, string>(_nextFile.FIndex!.Value, _nextFile.Name));
            _myMediaCurrentIndex = 0;
            _status = Status.Initialized;
            await _PSSWriteMyMediaIndexes();
            await _PSSWriteMyMediaCurrentIndex();
            await _PSSWriteStatus();
            StateHasChanged();
        }
        else
        {
            _myMediaIndexes = null;
            _myMediaCurrentIndex = -1;
            _status = Status.Empty;
            await _PSSWriteStatus();
            StateHasChanged();
            toastService.ShowError("There is no files to show - are paths are valid? Check it on the configuration page");
        }
    }

    private async Task Next()
    {
        if (_status != Status.Initialized) return;
        _previousFile = _currentFile;
        _myMediaCurrentIndex++;
        await _PSSWriteMyMediaCurrentIndex();
        if (_nextFile != null) _currentFile = _nextFile;
        else
        {
            if (_myMediaIndexes!.Count >= _myMediaCurrentIndex)
            {
                _currentFile = null;
                _status = Status.Empty;
                await _PSSWriteStatus();
            }
            else
            {
                File f = await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex].Item1, _myMediaIndexes![_myMediaCurrentIndex].Item2);
                if (f == null)
                {
                    toastService.ShowWarning("Something went wrong");
                    _myMediaIndexes = null;
                    _myMediaCurrentIndex = -1;
                    _status = Status.BeforeInit;
                    await _ResetProtectedSessionStore();
                }
                else
                {
                    _currentFile = f;
                }
            }
        }
        if (null != _currentFile) _newFileName = _currentFile.Name;
        if (_myMediaCurrentIndex + 1 < _myMediaIndexes!.Count)
        {
            _nextFile = await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex + 1].Item1, _myMediaIndexes[_myMediaCurrentIndex + 1].Item2);
        }
        else
        {
            int? index = FileService.GetNextIndex();
            if (index.HasValue)
            {
                _nextFile = await GetFileFromFileService(index.Value);
                if (_nextFile != null)
                {
                    _myMediaIndexes!.Add(new Tuple<int, string>(_nextFile.FIndex!.Value, _nextFile.Name));
                    await _PSSWriteMyMediaIndexes();
                }
            }
            else
            {
                _nextFile = null;
            }
        }

        ReloadPlayerIfVideo();
        StateHasChanged();
    }
    private async Task Back()
    {
        if (_status != Status.Initialized && _status != Status.Empty) return;
        if (_myMediaCurrentIndex <= 0)
        {
            toastService.ShowWarning("No more files");
            return;
        }
        _myMediaCurrentIndex--;
        try
        {
            _nextFile = _currentFile;
            _currentFile = (_previousFile != null) ? _previousFile : await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex].Item1, _myMediaIndexes[_myMediaCurrentIndex].Item2);
            _newFileName = _currentFile.Name;
            if (_myMediaCurrentIndex > 0) _previousFile = await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex - 1].Item1, _myMediaIndexes[_myMediaCurrentIndex - 1].Item2);
            else _previousFile = null;

            if (_status.Equals(Status.Empty))
            {
                if (null == _folders) LoadSession();
                _status = Status.Initialized;
                await _PSSWriteStatus();
            }
            ReloadPlayerIfVideo();
            StateHasChanged();
            await _PSSWriteMyMediaCurrentIndex();
        }
        catch (Exception)
        {
            toastService.ShowWarning("Something went wrong");
            _myMediaIndexes = null;
            _myMediaCurrentIndex = -1;
            _status = Status.BeforeInit;
            await _ResetProtectedSessionStore();
            StateHasChanged();
        }
    }
    private async void Reset()
    {
        if (!await FileService.InitializeFiles(true))
        {
            toastService.ShowError("Cannot initialize service. The destination or/and source path is invalid. Visit the configuration page");
            return;
        }
        await _ResetProtectedSessionStore();
        _storagePrefix = await FileService.GetStoragePrefix();
        _previousFile = _currentFile = _nextFile = null;
        InitSession();
        ReloadPlayerIfVideo();
        StateHasChanged();
    }
    private async void ShutdownApp()
    {
        await JS.InvokeVoidAsync("close");
        AppLifetime.StopApplication();
    }

    [JSInvokable]
    public async void HandleKeyDown(string key, bool isListenForRegisterKey, string folderTitle)
    {
        switch (_status)
        {
            case Status.BeforeInit:
                if (key == " ") InitSession();
                break;
            case Status.Initialized:
                if (isListenForRegisterKey && key.Length == 1) await RegisterKeyInFolder(key.First(), folderTitle);
                else if (key == "ArrowRight")
                {
                    if ((null != _nextFile && _nextFile.FileType != File.FileTypeEnum.Photo) || null == _nextFile) await JS.InvokeVoidAsync("closeModal", "photoModal");
                    else if (null != _nextFile && _nextFile.FileType == File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("resetPosition");
                    await Next();
                }
                else if (key == "ArrowLeft")
                {
                    if (null != _previousFile && _previousFile.FileType != File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("closeModal", "photoModal");
                    else if (null != _previousFile && _previousFile.FileType == File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("resetPosition");
                    await Back();
                }
                else if (key == "F2") await FileNameInputOpen();
                else if (key == " " && null != _currentFile && _currentFile.FileType == File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("toggleModal", "photoModal");
                else if (key.Length == 1 && s_alfanumeralRegex.IsMatch(key) && null != _folders)
                {
                    var folder = _folders.Where(f => f.KeyBind == key.First()).FirstOrDefault();
                    if (null != folder)
                    {
                        if ((null != _nextFile && _nextFile.FileType != File.FileTypeEnum.Photo) || null == _nextFile) await JS.InvokeVoidAsync("closeModal", "photoModal");
                        else if (null != _nextFile && _nextFile.FileType == File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("resetPosition");
                        await MoveFile(folder.Path);
                    }
                }
                break;
            case Status.Empty:
                if (key == "ArrowLeft")
                {
                    if (null != _previousFile && _previousFile.FileType != File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("closeModal", "photoModal");
                    else if (null != _previousFile && _previousFile.FileType == File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("resetPosition");
                    await Back();
                }
                break;
        }
    }

    private async Task PhotoModalOpen()
    {
        await JS.InvokeVoidAsync("loadZoom");
    }

    private async Task FolderModalOpen()
    {
        await _folderDialog.Init();
    }
    private async Task FolderModalClose(string folderName)
    {
        await JS.InvokeVoidAsync("closeModal", "folderModal");
        if (!String.IsNullOrWhiteSpace(folderName))
        {
            if (FileService.CreateFolder(folderName))
            {
                _folders = await FileService.GetFoldersAsync();
            }
            else
            {
                toastService.ShowError("Couldn't add folder");
            }
        }
    }

    private async Task ConfigModalOnOpen()
    {
        await _configDialog.Init();
    }
    private async Task ConfigModalClose(bool isChanged)
    {
        await JS.InvokeVoidAsync("closeModal", "configModal");
        if (isChanged)
        {
            await _ResetProtectedSessionStore();
            _storagePrefix = await FileService.GetStoragePrefix();
            _status = Status.BeforeInit;
            _previousFile = _currentFile = _nextFile = null;
            await _PSSWriteStatus();
        }
    }

    private async Task KeyBindsModalOnOpen()
    {
        await _keyBindsDialog.Init();
    }
    private async Task KeyBindsModalClose(bool isChanged)
    {
        await JS.InvokeVoidAsync("closeModal", "keyBindsModal");
        if (isChanged)
        {
            FileService.AppendDirectoriesWithKeyBinds();
            _folders = await FileService.GetFoldersAsync();
            StateHasChanged();
        }
    }

    private async void ReloadPlayerIfVideo()
    {
        if (File.FileTypeEnum.Video == _currentFile?.FileType)
        {
            await Task.Delay(LOAD_VIDEO_TIME_DELAY);
            await JS.InvokeVoidAsync("loadVideo");
        }
    }

    private async Task<File> GetFileFromFileService(int index, string fileName = "")
    {
        string newPrefix = await FileService.GetStoragePrefix();
        if (newPrefix != _storagePrefix)
        {
            _storagePrefix = newPrefix;
            toastService.ShowWarning("Page was reloaded due to data discrepancy");
            _myMediaIndexes = null;
            _myMediaCurrentIndex = -1;
            _status = Status.BeforeInit;
            await _ResetProtectedSessionStore();
            StateHasChanged();
            return null!;
        }

        var file = string.IsNullOrEmpty(fileName) ? FileService.GetFileAtIndex(index) : FileService.GetFileAtIndex(index, fileName);

        if (file == null)
        {
            toastService.ShowWarning("Something went wrong");
            _myMediaIndexes = null;
            _myMediaCurrentIndex = -1;
            _status = Status.BeforeInit;
            await _ResetProtectedSessionStore();
            StateHasChanged();
        }
        return file ?? throw new Exception("File not found");
    }

    private async Task FileNameInputOpen()
    {
        _fileNameInputStatus = FileNameInputStatus.Opened;
        StateHasChanged();
        await Task.Yield();
        await _fileNameInput.FocusAsync();
    }
    private async Task FileNameInputClose()
    {
        await Task.Run(() =>
        {
            _fileNameInputStatus = FileNameInputStatus.Closed;
            _newFileName = _currentFile!.Name;
        });
    }
    private async Task SaveFileName()
    {
        if (_currentFile == null) return;
        FileService.ChangeFileName(_currentFile.FIndex!.Value, _newFileName);
        _currentFile = await GetFileFromFileService(_currentFile!.FIndex!.Value);
        if (_currentFile == null) return;
        _myMediaIndexes![_myMediaCurrentIndex] = new Tuple<int, string>(_currentFile.FIndex!.Value, _currentFile.Name);
        await _PSSWriteMyMediaIndexes();
        await FileNameInputClose();
        StateHasChanged();
    }
    private async Task SaveFileNameKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveFileName();
            StateHasChanged();
            await JS.InvokeVoidAsync("setFocusOnElement", "mediaDiv");
        }
        else if (e.Key == "Escape")
        {
            await FileNameInputClose();
            await JS.InvokeVoidAsync("setFocusOnElement", "mediaDiv");
        }
    }
    private async Task<string> GetTextFileContent()
    {
        if (_currentFile == null) return "";
        return await FileService.GetTextFileContent(_currentFile);
    }
    private async Task MoveFile(string destiny)
    {
        if (_currentFile == null) return;
        var oldFile = _currentFile;
        Task next = Next();
        await Task.Delay(MOVE_FILE_TIME_DELAY);
        FileService.MoveFile(oldFile, destiny);
    }

    private async Task RegisterKeyInFolder(char key, string path)
    {
        if (null != _keyBindsDialog.MyFolders && (key.Equals('\0') || key.Equals(' ')))
        {
            _keyBindsDialog.MyFolders.Where(f => f.Path == path).First().KeyBind = '\0';
            StateHasChanged();
        }
        else
        {
            if (s_alfanumeralRegex.IsMatch(key.ToString()) && null != _keyBindsDialog.MyFolders && !string.IsNullOrEmpty(path))
            {
                if (_keyBindsDialog.MyFolders.Any(f => f.KeyBind == key)) await UnregisterKeyInFolder(key);
                _keyBindsDialog.MyFolders.Where(f => f.Path == path).First().KeyBind = key;
                StateHasChanged();
            }
        }
    }
    private async Task UnregisterKeyInFolder(char key)
    {
        if (null != _keyBindsDialog.MyFolders)
        {
            await Task.Run(() =>
            {
                _keyBindsDialog.MyFolders.Where(f => f.KeyBind == key).First().KeyBind = '\0';
            });
        }
    }

    private async Task _PSSReadMyMediaIndexes()
    {
        _myMediaIndexes = (await ProtectedSessionStore.GetAsync<List<Tuple<int, string>>>(_storagePrefix + s_storageMyMediaList)).Value;
    }
    private async Task _PSSReadMyMediaCurrentIndex()
    {
        _myMediaCurrentIndex = (await ProtectedSessionStore.GetAsync<int>(_storagePrefix + s_storageMyMediaCurrentIndex)).Value;
    }
    private async Task _PSSReadStatus()
    {
        _status = (await ProtectedSessionStore.GetAsync<Status>(_storagePrefix + s_storageStatus)).Value;
    }
    private async Task _PSSWriteMyMediaIndexes()
    {
        if (_myMediaIndexes != null)
        {
            await ProtectedSessionStore.SetAsync(_storagePrefix + s_storageMyMediaList, _myMediaIndexes);
        }
        else
        {
            _myMediaIndexes = new List<Tuple<int, string>>();
            await ProtectedSessionStore.SetAsync(_storagePrefix + s_storageMyMediaList, _myMediaIndexes);
        }
    }

    private async Task _PSSWriteMyMediaCurrentIndex()
    {
        await ProtectedSessionStore.SetAsync(_storagePrefix + s_storageMyMediaCurrentIndex, _myMediaCurrentIndex);
    }
    private async Task _PSSWriteStatus()
    {
        await ProtectedSessionStore.SetAsync(_storagePrefix + s_storageStatus, _status);
    }
    private async Task _PSSDeleteMyMediaIndexes()
    {
        await ProtectedSessionStore.DeleteAsync(_storagePrefix + s_storageMyMediaList);
    }
    private async Task _PSSDeleteMyMediaCurrentIndex()
    {
        await ProtectedSessionStore.DeleteAsync(_storagePrefix + s_storageMyMediaCurrentIndex);
    }
    private async Task _PSSDeleteStatus()
    {
        await ProtectedSessionStore.DeleteAsync(_storagePrefix + s_storageStatus);
    }
    private async Task _ResetProtectedSessionStore()
    {
        await _PSSDeleteMyMediaCurrentIndex();
        await _PSSDeleteMyMediaIndexes();
        await _PSSDeleteStatus();
    }
}
