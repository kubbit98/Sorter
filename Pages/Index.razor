@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Sorter.Data;
@using Blazored.Toast.Configuration;
@using System.Text.RegularExpressions;
@inject FileService FileService
@inject IJSRuntime JS
@inject IHostApplicationLifetime AppLifetime
@inject IToastService toastService
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>sorter app</PageTitle>
<h1 id="h1">sorter app</h1>

@switch (_status)
{
    case Status.BeforeInit:
        <div class="row mb-3">
            <div class="col">
                <p>Click to start</p>
            </div>
        </div>
        <div class="row mb-3">
            <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-primary" ButtonName="Init session" ButtonOnClickAction="InitSession" />
            <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-outline-secondary" ButtonName="Configuration" ButtonOnClickTask="ConfigModalOnOpen" CustomButtonParameter="_dictConfigDialog" />
        </div>
        @if (SHOW_DEBUG_INFO)
        {
            // unreachable beacuse of the variable false which is manually set in this file
            <div class="col col-sm-3">
                <p>
                    INDEX @_myMediaCurrentIndex
                </p>
                @if (null != _myMediaIndexes)
                {
                    foreach (var tuple in _myMediaIndexes)
                    {
                        <p>tupla: @tuple.Item1 | @tuple.Item2</p>
                    }
                }
                <p>
                    status: @_status
                </p>
            </div>
        }
        break;
    case Status.Empty:
        <div class="row mb-3">
            <div class="col">
                <p>No more files to sort! You can shutdown app, back to previous file, reset server or reconfigure app.</p>
            </div>
        </div>
        <div class="row mb-3">
            <ButtonInDiv DivCssClass="col-6 d-grid" ButtonCssClass="btn btn-secondary" ButtonName="Back" ButtonOnClickTask="Back" />
            <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-outline-secondary" ButtonName="Reset server" ButtonOnClickAction="Reset" />
            <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-outline-secondary" ButtonName="Shut down" ButtonOnClickAction="ShutdownApp" />
            <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-outline-secondary" ButtonName="Configuration" ButtonOnClickTask="ConfigModalOnOpen" CustomButtonParameter="_dictConfigDialog" />
        </div>
        @if (SHOW_DEBUG_INFO)
        {
            <div class="col col-sm-3">
                <p>
                    INDEX @_myMediaCurrentIndex
                </p>
                @if (null != _myMediaIndexes)
                {
                    foreach (var tuple in _myMediaIndexes)
                    {
                        <p>tupla: @tuple.Item1 | @tuple.Item2</p>
                    }
                }
                <p>
                    status: @_status
                </p>
            </div>
        }
        break;
    case Status.Initialized:
        @*name and password*@
        <div class="row mb-3">
            <div class="col-sm-8">
                <p>
                    @_currentFile!.OnlyPath <strong>@_currentFile.Name.@_currentFile.Extension</strong>
                </p>
            </div>
            @if (!_password!.Equals(string.Empty))
            {
                <label class="col-sm-2" for="password">Password to unlock more function:</label>
                <div class="col-sm-2">
                    <input class="form-control" type="password" id="passwordToUnlock" name="passwordToUnlock" @bind="_unlockBoxPassword" @bind:event="oninput" data-prevent-keydown>
                </div>
            }
        </div>
        @*main buttons*@
        <div class="row mb-3">
            <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-secondary" ButtonName="Back" ButtonOnClickTask="Back" />
            <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-secondary" ButtonName="Next" ButtonOnClickTask="Next" />
            @if (_password.Equals(_unlockBoxPassword) || _password.Equals(string.Empty))
            {
                <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-outline-secondary" ButtonName="Reset server" ButtonOnClickAction="Reset" />
                <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-outline-secondary" ButtonName="Shut down" ButtonOnClickAction="ShutdownApp" />
            }
            <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-secondary" ButtonName="Add new folder modal" ButtonOnClickTask="FolderModalOpen" CustomButtonParameter="_dictFolderDialog" />
            <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-outline-secondary" ButtonName="Keybinding configuration" ButtonOnClickTask="KeyBindsModalOnOpen" CustomButtonParameter="_dictKeyBindsDialog" />
            <ButtonInDiv DivCssClass="col d-grid" ButtonCssClass="btn btn-outline-secondary" ButtonName="Configuration" ButtonOnClickTask="ConfigModalOnOpen" CustomButtonParameter="_dictConfigDialog" />
        </div>
        @*folders*@
        <div class="container">
            @*folders*@
            <div class="row row-cols-@_cols mb-3">
                @for (int i = 0; i < _folders!.Length; i++)
                {
                    var k = i;
                    <ButtonInDiv DivCssClass="col d-grid mb-1" ButtonCssClass="btn btn-primary" ButtonName="@_folders[k].DisplayName" ButtonOnClickAction="async ()=> await MoveFile(_folders[k].Path)" Title="@_folders[k].Path" />
                }
            </div>
            @*rename*@
            @if (_password.Equals(string.Empty) || _password.Equals(_unlockBoxPassword) || _allowRename)
            {
                <div class="row mb-3">
                    <div class="col-sm-6">
                        <input @ref="_fileNameInput" data-prevent-keydown class="form-control" type="text" id="fileName" name="fileName" @bind="_newFileName" @bind:event="oninput" @onkeyup="StateHasChanged" @onkeydown="SaveFileNameKeyDown">
                    </div>
                    <ButtonInDiv DivCssClass="col-sm-2" ButtonCssClass="btn btn-secondary" ButtonName="Save file name" ButtonOnClickTask="SaveFileName" CustomButtonParameter=@_dictNewFileName />
                    <div class="col-sm-4">
                        @if (string.IsNullOrWhiteSpace(_newFileName) || _currentFile.Name.Equals(_newFileName))
                        {
                            _dictNewFileName = new Dictionary<string, object> { { "disabled", "" } };
                        }
                        else if (_newFileName.IndexOfAny(Path.GetInvalidFileNameChars().ToArray()) != -1)
                        {
                            _dictNewFileName = new Dictionary<string, object> { { "disabled", "" } };
                            <p>Illegal name of folder</p>
                        }
                        else
                        {
                            _dictNewFileName = null!;
                        }
                    </div>

                </div>
            }
        </div>
        @*media*@
        <div class="row mb-3">
            <div class="col col-sm-3">
                @if (null != _previousFile)
                {
                    <div class="row mb-3">
                        <p>Previous file: @_previousFile.NameWithExtension<br />(in @_previousFile.Path)</p>
                        @if (_previousFile?.FileType == File.FileTypeEnum.Photo)
                        {
                            <img src="@_previousFile.DisplayPath" class="img-fluid" style="cursor: pointer;" @onclick="@Back" />
                        }
                        else
                        {
                            <p>Previous file is not photo</p>
                        }
                    </div>
                }
            </div>
            <div class="col col-sm-6">
                @switch (_currentFile?.FileType)
                {
                    case File.FileTypeEnum.Video:
                        <video class="img-fluid mx-auto d-block" style="max-height: 90vh;" controls autoplay id="videoTagId">
                            <source src="@_currentFile?.Path">
                            Your browser does not support the video tag.
                        </video>
                        break;
                    case File.FileTypeEnum.Photo:
                        <img data-bs-toggle="modal" data-bs-target="#photoModal" @onclick="@PhotoModalOpen"
                             src="@(_currentFile!.DisplayPath)"
                             class="img-fluid mx-auto d-block"
                             style="max-height: 90vh;" />
                        <PhotoDialog Photo="@_currentFile" OnNext="@Next" OnBack="@Back" @ref="_photoDialog"
                                     IsPrevPhoto="@(_previousFile?.FileType==File.FileTypeEnum.Photo)"
                                     IsNextPhoto="@(_nextFile?.FileType==File.FileTypeEnum.Photo)" />
                        break;
                    case File.FileTypeEnum.PDF:
                        <embed src="@_currentFile?.Path" style="width:100%;height:90vh;" />
                        break;
                    case File.FileTypeEnum.Text:
                        <p>@GetTextFileContent().Result</p>
                        break;
                    default:
                        <p>Filetype "@_currentFile?.Extension" is not supported</p>
                        break;
                }
            </div>
            <div class="col col-sm-3">
                @if (null != _nextFile)
                {
                    <div class="row mb-3">
                        <p>Next file: @_nextFile.NameWithExtension<br />(in @_nextFile.Path)</p>
                        @if (_nextFile?.FileType == File.FileTypeEnum.Photo)
                        {
                            <img src="@_nextFile.DisplayPath" class="img-fluid" style="cursor: pointer;" @onclick="@Next" />
                        }
                        else
                        {
                            <p>Next file is not photo</p>
                        }
                    </div>
                }
                @if (SHOW_DEBUG_INFO)
                {
                    <div class="row mb-3">
                        <p>
                            INDEX @_myMediaCurrentIndex
                        </p>
                        @if (null != _myMediaIndexes)
                        {
                            foreach (var tuple in _myMediaIndexes)
                            {
                                <p>tupla: @tuple.Item1 | @tuple.Item2</p>
                            }
                        }
                        <p>
                            status: @_status
                        </p>
                    </div>
                }
            </div>
        </div>
        break;
}

@if (_status == Status.Initialized)
{
    <FolderDialog ExistingFolders="@_folders?.Select(f=>f.Name).ToArray()" OnSaveTask="@FolderModalClose" @ref=_folderDialog />
    <KeyBindsDialog OnChange="@KeyBindsModalClose" ExistingFolders="_folders" @ref=_keyBindsDialog />
}
<ConfigDialog OnChange="@ConfigModalClose" @ref=_configDialog />
<BlazoredToasts Position="ToastPosition.BottomRight" IconType="IconType.Material" ShowProgressBar="true"
                RemoveToastsOnNavigation="true" PauseProgressOnHover="true" MaxToastCount="3" Timeout="10" />

@code {
    private const string s_storageMyMediaList = "_MyMediaIndexes";
    private const string s_storageMyMediaCurrentIndex = "_MyMediaCurrentIndex";
    private const string s_storageStatus = "_Status";
    private string _storagePrefix = string.Empty;

    private const bool SHOW_DEBUG_INFO = false;
    private const int LOAD_VIDEO_TIME_DELAY = 100;
    private const int MOVE_FILE_TIME_DELAY = 500;
    private const int BRAJANEK = 4; // its MAX_COLUMN_NUMBER but i really need to name this like that. Please, respect this and do not change.
    
    private static Regex s_alfanumeralRegex = new Regex(@"^[a-zA-Z0-9]$");

    private List<Tuple<int, string>>? _myMediaIndexes;
    private int _myMediaCurrentIndex;
    private File? _currentFile;
    private File? _previousFile;
    private File? _nextFile;
    private Folder[]? _folders;
    private double? _cols;
    private string _unlockBoxPassword = string.Empty;
    private string? _password;
    private string _newFileName = string.Empty;
    private bool _allowRename;
    private Status _status = Status.OnConstructor;
    private FolderDialog _folderDialog = new FolderDialog();
    private ConfigDialog _configDialog = new ConfigDialog();
    private KeyBindsDialog _keyBindsDialog = new KeyBindsDialog();
    private PhotoDialog _photoDialog = new PhotoDialog();
    private ElementReference _fileNameInput;

    private Dictionary<string, object> _dictFolderDialog = new Dictionary<string, object> { { "data-bs-toggle", "modal" }, { "data-bs-target", "#folderModal" } };
    private Dictionary<string, object> _dictConfigDialog = new Dictionary<string, object> { { "data-bs-toggle", "modal" }, { "data-bs-target", "#configModal" } };
    private Dictionary<string, object> _dictKeyBindsDialog = new Dictionary<string, object> { { "data-bs-toggle", "modal" }, { "data-bs-target", "#keyBindsModal" } };
    private Dictionary<string, object> _dictNewFileName = new Dictionary<string, object> { { "disabled", "" } };
    //private Dictionary<string, object> _dictPreventKeydown = new Dictionary<string, object> { { "data-prevent-keydown", "" } }; //add CustomButtonParameter=_dictPreventKeydown to buttonindiv to prevent key down event, not sure if useful so commented out

    public enum Status
    {
        OnConstructor, BeforeInit, Initialized, Empty,
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _storagePrefix = await FileService.GetStoragePrefix();
            await _PSSReadStatus();
            switch (_status)
            {
                case Status.OnConstructor:
                    _status = Status.BeforeInit;
                    break;
                case Status.BeforeInit:
                    break;
                case Status.Initialized:
                    await _PSSReadMyMediaIndexes();
                    await _PSSReadMyMediaCurrentIndex();
                    LoadSession();
                    _currentFile = await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex].Item1, _myMediaIndexes![_myMediaCurrentIndex].Item2);
                    if (_currentFile == null) break;
                    _newFileName = _currentFile.Name;
                    if (_myMediaCurrentIndex > 0)
                        _previousFile = await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex - 1].Item1, _myMediaIndexes![_myMediaCurrentIndex - 1].Item2);
                    if (_myMediaCurrentIndex + 1 < _myMediaIndexes!.Count)
                        _nextFile = await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex + 1].Item1, _myMediaIndexes![_myMediaCurrentIndex + 1].Item2);
                    break;
                case Status.Empty:
                    await _PSSReadMyMediaIndexes();
                    await _PSSReadMyMediaCurrentIndex();
                    break;
            }
            var dotNetReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("registerDNF", dotNetReference);
        }
        if (firstRender) StateHasChanged();
    }
    private async void LoadSession()
    {
        _folders = await FileService.GetFoldersAsync();
        _cols = Math.Min(Math.Ceiling(Math.Sqrt(_folders.Length)), BRAJANEK);
        _password = await FileService.GetPassword();
        _allowRename = await FileService.GetAllowRename();
    }
    private async void InitSession()
    {
        if (!await FileService.InitializeFiles(false))
        {
            toastService.ShowError("Cannot initialize service. The destination or/and source path is invalid. Visit the configuration page");
            return;
        }
        int? index = FileService.GetNextIndex();
        if (index.HasValue)
        {
            _myMediaIndexes = new List<Tuple<int, string>>();
            LoadSession();
            _currentFile = await GetFileFromFileService(index.Value);
            _newFileName = _currentFile.Name;
            _myMediaIndexes.Add(new Tuple<int, string>(_currentFile.FIndex!.Value, _currentFile.Name));
            int? nextIndex = FileService.GetNextIndex();
            if (nextIndex.HasValue) _nextFile = await GetFileFromFileService(nextIndex.Value);
            if (null != _nextFile) _myMediaIndexes.Add(new Tuple<int, string>(_nextFile.FIndex!.Value, _nextFile.Name));
            _myMediaCurrentIndex = 0;
            _status = Status.Initialized;
            await _PSSWriteMyMediaIndexes();
            await _PSSWriteMyMediaCurrentIndex();
            await _PSSWriteStatus();
            StateHasChanged();
        }
        else
        {
            _myMediaIndexes = null;
            _myMediaCurrentIndex = -1;
            _status = Status.Empty;
            await _PSSWriteStatus();
            StateHasChanged();
            toastService.ShowError("There is no files to show - are paths are valid? Check it on the configuration page");
        }
    }

    private async Task Next()
    {
        if (_status != Status.Initialized) return;
        _previousFile = _currentFile;
        _myMediaCurrentIndex++;
        await _PSSWriteMyMediaCurrentIndex();
        if (_nextFile != null) _currentFile = _nextFile;
        else
        {
            if (!_myMediaIndexes!.Any(t => t.Item1 == _myMediaCurrentIndex))
            {
                _currentFile = null;
                _status = Status.Empty;
                await _PSSWriteStatus();
            }
            else
            {
                File f = await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex].Item1, _myMediaIndexes![_myMediaCurrentIndex].Item2);
                if (f == null)
                {
                    toastService.ShowWarning("Something went wrong");
                    _myMediaIndexes = null;
                    _myMediaCurrentIndex = -1;
                    _status = Status.BeforeInit;
                    await _ResetProtectedSessionStore();
                }
                else
                {
                    _currentFile = f;
                }
            }
        }
        if (null != _currentFile) _newFileName = _currentFile.Name;
        if (_myMediaCurrentIndex + 1 < _myMediaIndexes!.Count)
        {
            _nextFile = await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex + 1].Item1, _myMediaIndexes[_myMediaCurrentIndex + 1].Item2);
        }
        else
        {
            int? index = FileService.GetNextIndex();
            if (index.HasValue)
            {
                _nextFile = await GetFileFromFileService(index.Value);
                if (_nextFile != null)
                {
                    _myMediaIndexes!.Add(new Tuple<int, string>(_nextFile.FIndex!.Value, _nextFile.Name));
                    await _PSSWriteMyMediaIndexes();
                }
            }
            else
            {
                _nextFile = null;
            }
        }

        ReloadPlayerIfVideo();
        StateHasChanged();
    }
    private async Task Back()
    {
        if (_status != Status.Initialized && _status != Status.Empty) return;
        if (_myMediaCurrentIndex <= 0)
        {
            toastService.ShowWarning("No more files");
            return;
        }
        _myMediaCurrentIndex--;
        try
        {
            if (_status.Equals(Status.Empty))
            {
                if (null == _folders) LoadSession();
                _status = Status.Initialized;
                await _PSSWriteStatus();
            }

            _nextFile = _currentFile;
            _currentFile = (_previousFile != null) ? _previousFile : await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex].Item1, _myMediaIndexes[_myMediaCurrentIndex].Item2);
            _newFileName = _currentFile.Name;
            if (_myMediaCurrentIndex > 0) _previousFile = await GetFileFromFileService(_myMediaIndexes![_myMediaCurrentIndex - 1].Item1, _myMediaIndexes[_myMediaCurrentIndex - 1].Item2);
            else _previousFile = null;
            ReloadPlayerIfVideo();
            StateHasChanged();
            await _PSSWriteMyMediaCurrentIndex();
        }
        catch (Exception)
        {
            toastService.ShowWarning("Something went wrong");
            _myMediaIndexes = null;
            _myMediaCurrentIndex = -1;
            _status = Status.BeforeInit;
            await _ResetProtectedSessionStore();
            StateHasChanged();
        }
    }
    private async void Reset()
    {
        if (!await FileService.InitializeFiles(true))
        {
            toastService.ShowError("Cannot initialize service. The destination or/and source path is invalid. Visit the configuration page");
            return;
        }
        await _ResetProtectedSessionStore();
        _storagePrefix = await FileService.GetStoragePrefix();
        _previousFile = _currentFile = _nextFile = null;
        InitSession();
        ReloadPlayerIfVideo();
        StateHasChanged();
    }
    private async void ShutdownApp()
    {
        await JS.InvokeVoidAsync("close");
        AppLifetime.StopApplication();
    }

    [JSInvokable]
    public async void HandleKeyDown(string key, bool isListenForRegisterKey, string folderTitle)
    {
        switch (_status)
        {
            case Status.BeforeInit:
                if (key == " ") InitSession();
                break;
            case Status.Initialized:
                if (isListenForRegisterKey && key.Length == 1) await RegisterKeyInFolder(key.First(), folderTitle);
                else if (key == "ArrowRight")
                {
                    if ((null != _nextFile && _nextFile.FileType != File.FileTypeEnum.Photo) || null == _nextFile) await JS.InvokeVoidAsync("closeModal", "photoModal");
                    else if (null != _nextFile && _nextFile.FileType == File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("resetPosition");
                    await Next();
                }
                else if (key == "ArrowLeft")
                {
                    if (null != _previousFile && _previousFile.FileType != File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("closeModal", "photoModal");
                    else if (null != _previousFile && _previousFile.FileType == File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("resetPosition");
                    await Back();
                }
                else if (key == "F2") await _fileNameInput.FocusAsync();
                else if (key == " " && null != _currentFile && _currentFile.FileType == File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("toggleModal", "photoModal");
                else if (key.Length == 1 && s_alfanumeralRegex.IsMatch(key) && null != _folders)
                {
                    var folder = _folders.Where(f => f.KeyBind == key.First()).FirstOrDefault();
                    if (null != folder)
                    {
                        if ((null != _nextFile && _nextFile.FileType != File.FileTypeEnum.Photo) || null == _nextFile) await JS.InvokeVoidAsync("closeModal", "photoModal");
                        else if (null != _nextFile && _nextFile.FileType == File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("resetPosition");
                        await MoveFile(folder.Path);
                    }
                }
                break;
            case Status.Empty:
                if (key == "ArrowLeft")
                {
                    if (null != _previousFile && _previousFile.FileType != File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("closeModal", "photoModal");
                    else if (null != _previousFile && _previousFile.FileType == File.FileTypeEnum.Photo) await JS.InvokeVoidAsync("resetPosition");
                    await Back();
                }
                break;
        }
    }

    private async Task PhotoModalOpen()
    {
        await JS.InvokeVoidAsync("loadZoom");
    }

    private async Task FolderModalOpen()
    {
        await _folderDialog.Init();
    }
    private async Task FolderModalClose(string folderName)
    {
        await JS.InvokeVoidAsync("closeModal", "folderModal");
        if (!String.IsNullOrWhiteSpace(folderName))
        {
            if (FileService.CreateFolder(folderName))
            {
                _folders = await FileService.GetFoldersAsync();
            }
            else
            {
                toastService.ShowError("Couldn't add folder");
            }
        }
    }

    private async Task ConfigModalOnOpen()
    {
        await _configDialog.Init();
    }
    private async Task ConfigModalClose(bool isChanged)
    {
        await JS.InvokeVoidAsync("closeModal", "configModal");
        if (isChanged)
        {
            await _ResetProtectedSessionStore();
            _storagePrefix = await FileService.GetStoragePrefix();
            _status = Status.BeforeInit;
            _previousFile = _currentFile = _nextFile = null;
            await _PSSWriteStatus();
        }
    }

    private async Task KeyBindsModalOnOpen()
    {
        await _keyBindsDialog.Init();
    }
    private async Task KeyBindsModalClose(bool isChanged)
    {
        await JS.InvokeVoidAsync("closeModal", "keyBindsModal");
        if (isChanged)
        {
            FileService.AppendDirectoriesWithKeyBinds();
            _folders = await FileService.GetFoldersAsync();
            StateHasChanged();
        }
    }

    private async void ReloadPlayerIfVideo()
    {
        if (File.FileTypeEnum.Video == _currentFile?.FileType)
        {
            await Task.Delay(LOAD_VIDEO_TIME_DELAY);
            await JS.InvokeVoidAsync("loadVideo");
        }
    }

    private async Task<File> GetFileFromFileService(int index, string fileName = "")
    {
        string newPrefix = await FileService.GetStoragePrefix();
        if (newPrefix != _storagePrefix)
        {
            _storagePrefix = newPrefix;
            toastService.ShowWarning("Page was reloaded due to data discrepancy");
            _myMediaIndexes = null;
            _myMediaCurrentIndex = -1;
            _status = Status.BeforeInit;
            await _ResetProtectedSessionStore();
            StateHasChanged();
            return null!;
        }

        var file = string.IsNullOrEmpty(fileName) ? FileService.GetFileAtIndex(index) : FileService.GetFileAtIndex(index, fileName);

        if (file == null)
        {
            toastService.ShowWarning("Something went wrong");
            _myMediaIndexes = null;
            _myMediaCurrentIndex = -1;
            _status = Status.BeforeInit;
            await _ResetProtectedSessionStore();
            StateHasChanged();
        }
        return file ?? throw new Exception("File not found");
    }

    private async Task SaveFileName()
    {
        if (_currentFile == null) return;
        FileService.ChangeFileName(_currentFile.FIndex!.Value, _newFileName);
        _currentFile = await GetFileFromFileService(_currentFile!.FIndex!.Value);
        if (_currentFile == null) return;
        _myMediaIndexes![_myMediaCurrentIndex] = new Tuple<int, string>(_currentFile.FIndex!.Value, _currentFile.Name);
        await _PSSWriteMyMediaIndexes();
        StateHasChanged();
    }
    private async Task SaveFileNameKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SaveFileName();
            StateHasChanged();
            await JS.InvokeVoidAsync("setFocusOnElement", "h1");
        }
        else if (e.Key == "Escape") await JS.InvokeVoidAsync("setFocusOnElement", "h1");
    }
    private async Task<string> GetTextFileContent()
    {
        if (_currentFile == null) return "";
        return await FileService.GetTextFileContent(_currentFile);
    }
    private async Task MoveFile(string destiny)
    {
        if (_currentFile == null) return;
        var oldFile = _currentFile;
        Task next = Next();
        await Task.Delay(MOVE_FILE_TIME_DELAY);
        FileService.MoveFile(oldFile, destiny);
    }

    private async Task RegisterKeyInFolder(char key, string path)
    {
        if (null != _keyBindsDialog.MyFolders && (key.Equals('\0') || key.Equals(' ')))
        {
            _keyBindsDialog.MyFolders.Where(f => f.Path == path).First().KeyBind = '\0';
            StateHasChanged();
        }
        else
        {
            if (s_alfanumeralRegex.IsMatch(key.ToString()) && null != _keyBindsDialog.MyFolders && !string.IsNullOrEmpty(path))
            {
                if (_keyBindsDialog.MyFolders.Any(f => f.KeyBind == key)) await UnregisterKeyInFolder(key);
                _keyBindsDialog.MyFolders.Where(f => f.Path == path).First().KeyBind = key;
                StateHasChanged();
            }
        }
    }
    private async Task UnregisterKeyInFolder(char key)
    {
        if (null != _keyBindsDialog.MyFolders)
        {
            await Task.Run(() =>
            {
                _keyBindsDialog.MyFolders.Where(f => f.KeyBind == key).First().KeyBind = '\0';
            });
        }
    }

    private async Task _PSSReadMyMediaIndexes()
    {
        _myMediaIndexes = (await ProtectedSessionStore.GetAsync<List<Tuple<int, string>>>(_storagePrefix + s_storageMyMediaList)).Value;
    }
    private async Task _PSSReadMyMediaCurrentIndex()
    {
        _myMediaCurrentIndex = (await ProtectedSessionStore.GetAsync<int>(_storagePrefix + s_storageMyMediaCurrentIndex)).Value;
    }
    private async Task _PSSReadStatus()
    {
        _status = (await ProtectedSessionStore.GetAsync<Status>(_storagePrefix + s_storageStatus)).Value;
    }
    private async Task _PSSWriteMyMediaIndexes()
    {
        if (_myMediaIndexes != null)
        {
            await ProtectedSessionStore.SetAsync(_storagePrefix + s_storageMyMediaList, _myMediaIndexes);
        }
        else
        {
            _myMediaIndexes = new List<Tuple<int, string>>();
            await ProtectedSessionStore.SetAsync(_storagePrefix + s_storageMyMediaList, _myMediaIndexes);
        }
    }

    private async Task _PSSWriteMyMediaCurrentIndex()
    {
        await ProtectedSessionStore.SetAsync(_storagePrefix + s_storageMyMediaCurrentIndex, _myMediaCurrentIndex);
    }
    private async Task _PSSWriteStatus()
    {
        await ProtectedSessionStore.SetAsync(_storagePrefix + s_storageStatus, _status);
    }
    private async Task _PSSDeleteMyMediaIndexes()
    {
        await ProtectedSessionStore.DeleteAsync(_storagePrefix + s_storageMyMediaList);
    }
    private async Task _PSSDeleteMyMediaCurrentIndex()
    {
        await ProtectedSessionStore.DeleteAsync(_storagePrefix + s_storageMyMediaCurrentIndex);
    }
    private async Task _PSSDeleteStatus()
    {
        await ProtectedSessionStore.DeleteAsync(_storagePrefix + s_storageStatus);
    }
    private async Task _ResetProtectedSessionStore()
    {
        await _PSSDeleteMyMediaCurrentIndex();
        await _PSSDeleteMyMediaIndexes();
        await _PSSDeleteStatus();
    }
}
